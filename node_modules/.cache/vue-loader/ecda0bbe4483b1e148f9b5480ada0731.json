{"remainingRequest":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/employee/Desktop/projects/vuejs-intermediate/src/views/posts/Posts.vue?vue&type=style&index=0&id=5284a266&lang=scss&scoped=true&","dependencies":[{"path":"/home/employee/Desktop/projects/vuejs-intermediate/src/views/posts/Posts.vue","mtime":1624628773813},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250ZW50ewogIG1pbi1oZWlnaHQ6IDg4dmg7Cn0K"},{"version":3,"sources":["Posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA","file":"Posts.vue","sourceRoot":"src/views/posts","sourcesContent":["<template>\n    <div >\n      <div class='content px-4 py-4'>\n        <PostsFilterComponent v-on:setAuthor='setAuthor' :authors='authors'/>\n        <div v-if=\"posts\" class='d-flex flex-wrap' >\n            <PostCardComponent\n              v-for=\"post of posts\"\n              :key = post.id\n              :post='post'\n              class='card my-3 mx-5'/>\n        </div>\n        <PostsPlaceholderComponent v-else/>\n      </div>\n      <PostsPaginationComponent\n        v-on:perPage='setPerPage'\n        v-on:nextPage='setNextPage'\n        :page='nextPage'\n        :initPerPage='initPerPage'\n        :total='totalPages' />\n    </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\n\nexport default {\n  name: 'PostsComponent',\n  data: () => ({\n    initPerPage: 10,\n    perPage: 10,\n    nextPage: 1,\n    author: undefined,\n  }),\n  props: ['userId'],\n  components: {\n    PostCardComponent: () => import('./partials/PostCard.vue'),\n    PostsPlaceholderComponent: () => import('./partials/PostsPlaceholder.vue'),\n    PostsPaginationComponent: () => import('./partials/PostsPagination.vue'),\n    PostsFilterComponent: () => import('./partials/PostsFilter.vue'),\n  },\n\n  methods: {\n    ...mapActions({ getPostsAction: 'posts/getPosts' }),\n    setPerPage(val) { this.perPage = val; },\n    setNextPage(page) { this.nextPage = page; },\n    setInitPerPage(val) { this.initPerPage = val; },\n    setAuthor(author) {\n      this.$router.push({ params: { userId: author } })\n        .catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n    // DISPATCH ACTION TO GET POSTS\n    initialGettingPosts() {\n      // IF QUERIES ARE EXIST -> DISPATCH ACTION TO GET POSTS BY QUERY\n      if (this.$route.query.currentPage || this.$route.query.perPage) {\n        this.getPostsAction({\n          nextPage: this.$route.query.currentPage ? +this.$route.query.currentPage : 1,\n          perPage: this.$route.query.perPage ? +this.$route.query.perPage : 10,\n        });\n      // DISPATCH ACTION TO GET POSTS WITHOUT QUERY\n      } else { this.getPostsAction(); }\n    },\n    initFilterParams() {\n      if (this.$route.query.currentPage) this.setNextPage(+this.$route.query.currentPage);\n      if (this.$route.query.perPage) this.setPerPage(+this.$route.query.perPage);\n      if (this.$route.query.perPage) this.setInitPerPage(+this.$route.query.perPage);\n    },\n    setSearchString() {\n      this.$router.push({\n        query: {\n          perPage: this.perPage,\n          currentPage: +this.nextPage,\n        },\n        params: { userId: this.$route.params.userId ? this.$route.params.userId : 'All' },\n      }).catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n\n  },\n  computed: {\n    ...mapGetters({\n      postsGetter: 'posts/getPosts',\n      totalPages: 'posts/getTotalPages',\n      authors: 'posts/getAuthors',\n    }),\n    posts() {\n      if (this.userId && this.userId !== 'All') {\n        return this.postsGetter().filter((post) => post.userId === +this.userId);\n      }\n      return this.postsGetter();\n    },\n  },\n\n  watch: {\n    perPage(newVal, oldVal) { console.log(newVal, oldVal); this.setSearchString(); },\n    nextPage() { this.setSearchString(); },\n    $route({ query, params: { userId } }, { query: oldQuery, params: { userId: oldUserId } }) {\n      if (userId !== oldUserId || query !== oldQuery) {\n        this.getPostsAction({ nextPage: this.nextPage, perPage: +this.perPage });\n      }\n    },\n  },\n\n  created() {\n    this.initFilterParams();\n    this.initialGettingPosts();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  .content{\n    min-height: 88vh;\n  }\n</style>\n"]}]}