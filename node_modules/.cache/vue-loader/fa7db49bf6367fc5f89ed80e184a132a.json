{"remainingRequest":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/employee/Desktop/projects/vuejs-intermediate/src/views/posts/Posts.vue?vue&type=style&index=0&id=5284a266&lang=scss&scoped=true&","dependencies":[{"path":"/home/employee/Desktop/projects/vuejs-intermediate/src/views/posts/Posts.vue","mtime":1625069732962},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/employee/Desktop/projects/vuejs-intermediate/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250ZW50ewogIG1pbi1oZWlnaHQ6IDgzdmg7Cn0K"},{"version":3,"sources":["Posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJA;AACA;AACA","file":"Posts.vue","sourceRoot":"src/views/posts","sourcesContent":["<template>\n    <div >\n      <div class='content px-5 py-4 pt-10'>\n        <PostsFilterComponent\n          v-on:setAuthor='setAuthor'\n          :authors='authorsName'\n          :defaultValue='authorName'\n          />\n        <div v-if=\"posts\" class='d-flex flex-wrap' >\n            <PostCardComponent\n              v-for=\"post of posts.posts\"\n              :key = post.id\n              :post='post'\n              class='card my-3 mr-5'/>\n        </div>\n        <PostsPlaceholderComponent v-else/>\n      </div>\n      <PostsPaginationComponent\n        v-on:perPage='setPerPage'\n        v-on:nextPage='setNextPage'\n        :page='nextPage'\n        :initPerPage='initPerPage'\n        :totalPages='posts.meta.totalPages'\n        />\n    </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  name: 'PostsComponent',\n  data: () => ({\n    initPerPage: 10,\n    perPage: 10,\n    nextPage: undefined,\n    author: undefined,\n    totalPages: 1,\n  }),\n  props: ['userId'],\n  components: {\n    PostCardComponent: () => import('./partials/PostCard.vue'),\n    PostsPlaceholderComponent: () => import('./partials/PostsPlaceholder.vue'),\n    PostsPaginationComponent: () => import('./partials/PostsPagination.vue'),\n    PostsFilterComponent: () => import('./partials/PostsFilter.vue'),\n  },\n\n  methods: {\n    setPerPage(val) {\n      this.perPage = +val;\n      this.$router.push({ query: { ...this.$route.query, perPage: val } })\n        .catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n    setNextPage(page) {\n      this.nextPage = page;\n      this.$router.push({ query: { ...this.$route.query, currentPage: page } })\n        .catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n    setAuthor(author) {\n      const authorId = this.getAuthors.find((item) => item.username === author)?.id;\n      this.author = authorId;\n      this.$router.push({ params: { userId: authorId }, query: this.$route.query })\n        .catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n    initFilterParams() {\n      if (this.$route.query.currentPage) this.setNextPage(+this.$route.query.currentPage);\n      if (this.$route.query.perPage) this.setPerPage(+this.$route.query.perPage);\n      if (this.$route.query.perPage) this.initPerPage = +this.$route.query.perPage;\n      if (this.$route.params.userId) this.author = +this.$route.params.userId;\n    },\n    setSearchString() {\n      this.$router.push({\n        query: {\n          ...this.$route.query,\n          perPage: +this.perPage,\n          currentPage: +this.nextPage,\n        },\n        params: { userId: this.$route.params.userId ? this.$route.params.userId : 'All' },\n      }).catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n    },\n\n  },\n  computed: {\n    ...mapGetters({\n      postsGetter: 'posts/getPosts',\n      getAuthors: 'authors/getAuthors',\n    }),\n\n    authorsName() {\n      return this.getAuthors.map((author) => author.username);\n    },\n    posts() {\n      if (this.userId && this.userId !== 'All') {\n        const posts = this.postsGetter(\n          {\n            userId: this.author,\n            nextPage: this.nextPage,\n            perPage: this.perPage,\n          },\n        );\n        return posts;\n      }\n      const posts = this.postsGetter({\n        nextPage: this.nextPage,\n        perPage: this.perPage,\n      });\n      return posts;\n    },\n    authorName() {\n      const initAuthorName = this.getAuthors.find((item) => item.id === this.author)?.username;\n      return initAuthorName;\n    },\n  },\n  watch: {\n    posts: {\n      deep: true,\n      emediate: true,\n      handler(\n        newVal,\n        oldVal,\n      ) {\n        if ((newVal.meta.totalPages < oldVal.meta.currentPage)\n            && (newVal.meta.currentPage < oldVal.meta.currentPage)\n            && (newVal.meta.perPage > oldVal.meta.perPage)\n        ) {\n          const currentPage = oldVal.meta.currentPage ? oldVal.meta.currentPage : 1;\n          this.nextPage = newVal.meta.currentPage > 0\n            ? newVal.meta.currentPage : currentPage;\n          this.$router.push({\n            query: {\n              ...this.$route.query,\n              currentPage: newVal.meta.currentPage > 0\n                ? newVal.meta.currentPage : currentPage,\n            },\n          })\n            .catch((error) => { if (error.name !== 'NavigationDuplicated') { throw error; } });\n        }\n      },\n    },\n    $route( newVal) {\n      console.log(newVal)\n    },\n  },\n\n  created() {\n    this.initFilterParams();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  .content{\n    min-height: 83vh;\n  }\n</style>\n"]}]}